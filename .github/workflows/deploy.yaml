name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.7

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
      
      - name: Get Application URL
        id: app_url
        run: |
          APP_URL=$(terraform output -raw application_url)
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
      
      - name: Health Check
        run: |
          echo "Waiting for application to be healthy..."
          for i in {1..30}; do
            if curl -f -s "${{ steps.app_url.outputs.url }}" > /dev/null; then
              echo "Application is healthy!"
              echo "Application URL: ${{ steps.app_url.outputs.url }}"
              exit 0
            fi
            echo "Attempt $i/30 failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Application health check failed"
          exit 1
      
      - name: Output Infrastructure Details
        run: |
          echo "### Deployment Successful!"
          echo "**Application URL:** ${{ steps.app_url.outputs.url }}"
          echo "**ECS Cluster:** $(terraform output -raw ecs_cluster_name)"
          echo "**ECS Service:** $(terraform output -raw ecs_service_name)"
          echo "**ALB DNS:** $(terraform output -raw alb_dns_name)"
          echo "**VPC ID:** $(terraform output -raw vpc_id)"

  manual-deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        run: terraform plan -input=false
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
      
      - name: Get Application URL
        id: app_url
        run: |
          APP_URL=$(terraform output -raw application_url)
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
      
      - name: Health Check
        run: |
          echo "Waiting for application to be healthy..."
          for i in {1..30}; do
            if curl -f -s "${{ steps.app_url.outputs.url }}" > /dev/null; then
              echo "Application is healthy!"
              echo "Application URL: ${{ steps.app_url.outputs.url }}"
              exit 0
            fi
            echo "Attempt $i/30 failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Application health check failed"
          exit 1
      
      - name: Output Infrastructure Details
        run: |
          echo "### Manual Deployment Successful!"
          echo "**Application URL:** ${{ steps.app_url.outputs.url }}"
          echo "**ECS Cluster:** $(terraform output -raw ecs_cluster_name)"
          echo "**ECS Service:** $(terraform output -raw ecs_service_name)"
          echo "**ALB DNS:** $(terraform output -raw alb_dns_name)"
          echo "**VPC ID:** $(terraform output -raw vpc_id)"